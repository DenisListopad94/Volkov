===================================================================================
1.Создать класс с двумя переменными. Добавить функцию вывода на экран и функцию изменения этих переменных.
Добавить функцию, которая находит сумму значений этих переменных, и функцию которая находит наибольшее значение из этих двух переменных.
==========================================================================================================
class Workwithvar:

    def __init__(self, var1, var2):
        self.var1 = var1
        self.var2 = var2

    def get_variables(self):
        print(f'первая перем. var1 {self.var1}, вторая перем. var2 {self.var2}')

    def set_variables(self, new_var1, new_var2):
        self.var1 = new_var1
        self.var2 = new_var2

    def sum_variables(self):
        print(f'сумма переменных равна {self.var1 + self.var2}')

    def find_max(self):
        if self.var1 > self.var2:
            print(f'первая переменная больше чем вторая')
        else:
            print(f'вторая переменная больше чем первая')


obj = Workwithvar(7, 15)
obj.get_variables()
obj.sum_variables()
obj.find_max()

====================================================================
2. Описать класс, реализующий десятичный счетчик, который может увеличивать или уменьшать свое значение на единицу в заданном диапазоне. 
Предусмотреть инициализацию счетчика значениями по умолчанию и произвольными значениями.
Счетчик имеет два метода: увеличения и уменьшения, — и свойство, позволяющее получить его текущее состояние.
Написать программу, демонстрирующую все возможности класса.
=====================================================================

class Counter:
    current=0
    def __init__(self, start=None, end=None):
        self.start = start
        self.end = end

    def increase(self):
        if self.current < self.end: 
            self.current += 1
            return self.current   
        else: 
            return 'Out of range'

my_count=Counter(start=0, end=3)
print(my_count.increase()) 
print(my_count.increase()) 
print(my_count.increase()) 
print(my_count.increase())  

====================================================
3.Реализуйте класс Shop. Предусмотреть возможность работы с произвольным числом продуктов,
поиска продуктов по названию, добавления их в магазин и удаления продуктов из него.
===================================================
class Shop:
    def __init__(self, products=None):
        if products is None:
            products = {}
        self.products = products

    def add_products(self):
        ans = ' '
        while ans != 'нет':
            name = input("Введите наименование продукта ")
            cnt = float(input("Введите кол-во продуктов "))
            self.products[name] = cnt
            ans = input("Желаете продолжить?")

    def search_products(self):
        ans = ' '
        while ans != 'нет':
            search = input("Введите наименование продукта для поиска ")
            if search in self.products.keys():
                print(f'Продукт {search}: кол-во: {self.products[search]}')
            else:
                print(f'Такого продукта {search} -  нет')
            ans = input("Желаете продолжить?")

    def remove_products(self):
        ans = ' '
        while ans != 'нет':
            search = input("Введите название продукта для удаления ")
            if search in self.products.keys():
                del self.products[search]
                print(f'Продукт {search}удален')
            if self.products:
                ans = input("Желаете продолжить?")
            else:
                print(f'В магазине больше нет продуктов')
                break

    def get_state(self):
        if self.products:
            print(f'В наличии в магазине {self.products}')
        else:
            print(f'В магазине нет продуктов')


obj = Shop()
obj.add_products()
obj.search_products()
obj.remove_products()
obj.get_state()

==================================================================
4.Реализуйте класс MoneyBox, для работы с виртуальной копилкой. Каждая копилка имеет ограниченную вместимость,
которая выражается целым числом – количеством монет(capacity -вместимость), которые можно положить в копилку.
Класс должен поддерживать информацию о количестве монет в копилке, предоставлять возможность добавлять монеты в
копилку и узнавать, можно ли добавить в копилку ещё какое-то количество монет, не превышая ее вместимость.
При создании копилки, число монет в ней равно 0.
Гарантируется, что метод add(self, v) будет вызываться только если can_add(self, v) – True.
=================================================================


class MoneyBox:
    def __init__(self, capacity=777, quantity_of_coins=0):
        self.capacity = capacity
        self.quantity_of_coins = quantity_of_coins

    def state_of_MoneyBox(self):
        print(f'Текущее кол-во монет в копилке - {self.quantity_of_coins}')

    def can_add(self):
        if self.quantity_of_coins <= 777:
            return True
        else:
            return False
    def add(self):
        if self.can_add:
            add_coins = int(input("Введите кол-во монет которое хотите добавить в копилку "))

            if self.quantity_of_coins + add_coins > 777:
                print(f'Копилка переполнена, вместимость копилки - {self.capacity}')
                print(f'Можно добавить только {777 - self.quantity_of_coins}')
            else:
                self.quantity_of_coins += add_coins


obj = MoneyBox()
obj.state_of_MoneyBox()
obj.add()
obj.state_of_MoneyBox()
obj.add()
obj.state_of_MoneyBox()
